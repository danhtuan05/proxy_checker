from flask import Flask, request, jsonify, render_template
import requests
import concurrent.futures
import os

port = int(os.environ.get("PORT", 5000))
app = Flask(__name__)
def get_proxy_location(ip: str) -> str:
    flags = {
    "AF": "ğŸ‡¦ğŸ‡«", "AL": "ğŸ‡¦ğŸ‡±", "DZ": "ğŸ‡©ğŸ‡¿", "AS": "ğŸ‡¦ğŸ‡¸", "AD": "ğŸ‡¦ğŸ‡©", "AO": "ğŸ‡¦ğŸ‡´",
    "AG": "ğŸ‡¦ğŸ‡¬", "AR": "ğŸ‡¦ğŸ‡·", "AM": "ğŸ‡¦ğŸ‡²", "AU": "ğŸ‡¦ğŸ‡º", "AT": "ğŸ‡¦ğŸ‡¹", "AZ": "ğŸ‡¦ğŸ‡¿",
    "BS": "ğŸ‡§ğŸ‡¸", "BH": "ğŸ‡§ğŸ‡­", "BD": "ğŸ‡§ğŸ‡©", "BB": "ğŸ‡§ğŸ‡§", "BY": "ğŸ‡§ğŸ‡¾", "BE": "ğŸ‡§ğŸ‡ª",
    "BZ": "ğŸ‡§ğŸ‡¿", "BJ": "ğŸ‡§ğŸ‡¯", "BM": "ğŸ‡§ğŸ‡²", "BT": "ğŸ‡§ğŸ‡¹", "BO": "ğŸ‡§ğŸ‡´", "BA": "ğŸ‡§ğŸ‡¦",
    "BW": "ğŸ‡§ğŸ‡¼", "BR": "ğŸ‡§ğŸ‡·", "BN": "ğŸ‡§ğŸ‡³", "BG": "ğŸ‡§ğŸ‡¬", "BF": "ğŸ‡§ğŸ‡«", "BI": "ğŸ‡§ğŸ‡®",
    "KH": "ğŸ‡°ğŸ‡­", "CM": "ğŸ‡¨ğŸ‡²", "CA": "ğŸ‡¨ğŸ‡¦", "CV": "ğŸ‡¨ğŸ‡»", "CF": "ğŸ‡¨ğŸ‡«", "TD": "ğŸ‡¹ğŸ‡©",
    "CL": "ğŸ‡¨ğŸ‡±", "CN": "ğŸ‡¨ğŸ‡³", "CO": "ğŸ‡¨ğŸ‡´", "KM": "ğŸ‡°ğŸ‡²", "CD": "ğŸ‡¨ğŸ‡©", "CG": "ğŸ‡¨ğŸ‡¬",
    "CR": "ğŸ‡¨ğŸ‡·", "CI": "ğŸ‡¨ğŸ‡®", "HR": "ğŸ‡­ğŸ‡·", "CU": "ğŸ‡¨ğŸ‡º", "CY": "ğŸ‡¨ğŸ‡¾", "CZ": "ğŸ‡¨ğŸ‡¿",
    "DK": "ğŸ‡©ğŸ‡°", "DJ": "ğŸ‡©ğŸ‡¯", "DM": "ğŸ‡©ğŸ‡²", "DO": "ğŸ‡©ğŸ‡´", "EC": "ğŸ‡ªğŸ‡¨", "EG": "ğŸ‡ªğŸ‡¬",
    "SV": "ğŸ‡¸ğŸ‡»", "GQ": "ğŸ‡¬ğŸ‡¶", "ER": "ğŸ‡ªğŸ‡·", "EE": "ğŸ‡ªğŸ‡ª", "SZ": "ğŸ‡¸ğŸ‡¿", "ET": "ğŸ‡ªğŸ‡¹",
    "FJ": "ğŸ‡«ğŸ‡¯", "FI": "ğŸ‡«ğŸ‡®", "FR": "ğŸ‡«ğŸ‡·", "GA": "ğŸ‡¬ğŸ‡¦", "GM": "ğŸ‡¬ğŸ‡²", "GE": "ğŸ‡¬ğŸ‡ª",
    "DE": "ğŸ‡©ğŸ‡ª", "GH": "ğŸ‡¬ğŸ‡­", "GR": "ğŸ‡¬ğŸ‡·", "GD": "ğŸ‡¬ğŸ‡©", "GT": "ğŸ‡¬ğŸ‡¹", "GN": "ğŸ‡¬ğŸ‡³",
    "GW": "ğŸ‡¬ğŸ‡¼", "GY": "ğŸ‡¬ğŸ‡¾", "HT": "ğŸ‡­ğŸ‡¹", "HN": "ğŸ‡­ğŸ‡³", "HU": "ğŸ‡­ğŸ‡º", "IS": "ğŸ‡®ğŸ‡¸",
    "IN": "ğŸ‡®ğŸ‡³", "ID": "ğŸ‡®ğŸ‡©", "IR": "ğŸ‡®ğŸ‡·", "IQ": "ğŸ‡®ğŸ‡¶", "IE": "ğŸ‡®ğŸ‡ª", "IL": "ğŸ‡®ğŸ‡±",
    "IT": "ğŸ‡®ğŸ‡¹", "JM": "ğŸ‡¯ğŸ‡²", "JP": "ğŸ‡¯ğŸ‡µ", "JO": "ğŸ‡¯ğŸ‡´", "KZ": "ğŸ‡°ğŸ‡¿", "KE": "ğŸ‡°ğŸ‡ª",
    "KI": "ğŸ‡°ğŸ‡®", "KP": "ğŸ‡°ğŸ‡µ", "KR": "ğŸ‡°ğŸ‡·", "KW": "ğŸ‡°ğŸ‡¼", "KG": "ğŸ‡°ğŸ‡¬", "LA": "ğŸ‡±ğŸ‡¦",
    "LV": "ğŸ‡±ğŸ‡»", "LB": "ğŸ‡±ğŸ‡§", "LS": "ğŸ‡±ğŸ‡¸", "LR": "ğŸ‡±ğŸ‡·", "LY": "ğŸ‡±ğŸ‡¾", "LI": "ğŸ‡±ğŸ‡®",
    "LT": "ğŸ‡±ğŸ‡¹", "LU": "ğŸ‡±ğŸ‡º", "MG": "ğŸ‡²ğŸ‡¬", "MW": "ğŸ‡²ğŸ‡¼", "MY": "ğŸ‡²ğŸ‡¾", "MV": "ğŸ‡²ğŸ‡»",
    "ML": "ğŸ‡²ğŸ‡±", "MT": "ğŸ‡²ğŸ‡¹", "MH": "ğŸ‡²ğŸ‡­", "MR": "ğŸ‡²ğŸ‡·", "MU": "ğŸ‡²ğŸ‡º", "MX": "ğŸ‡²ğŸ‡½",
    "FM": "ğŸ‡«ğŸ‡²", "MD": "ğŸ‡²ğŸ‡©", "MC": "ğŸ‡²ğŸ‡¨", "MN": "ğŸ‡²ğŸ‡³", "ME": "ğŸ‡²ğŸ‡ª", "MA": "ğŸ‡²ğŸ‡¦",
    "MZ": "ğŸ‡²ğŸ‡¿", "MM": "ğŸ‡²ğŸ‡²", "NA": "ğŸ‡³ğŸ‡¦", "NR": "ğŸ‡³ğŸ‡·", "NP": "ğŸ‡³ğŸ‡µ", "NL": "ğŸ‡³ğŸ‡±",
    "NZ": "ğŸ‡³ğŸ‡¿", "NI": "ğŸ‡³ğŸ‡®", "NE": "ğŸ‡³ğŸ‡ª", "NG": "ğŸ‡³ğŸ‡¬", "NO": "ğŸ‡³ğŸ‡´", "OM": "ğŸ‡´ğŸ‡²",
    "PK": "ğŸ‡µğŸ‡°", "PW": "ğŸ‡µğŸ‡¼", "PA": "ğŸ‡µğŸ‡¦", "PG": "ğŸ‡µğŸ‡¬", "PY": "ğŸ‡µğŸ‡¾", "PE": "ğŸ‡µğŸ‡ª",
    "PH": "ğŸ‡µğŸ‡­", "PL": "ğŸ‡µğŸ‡±", "PT": "ğŸ‡µğŸ‡¹", "QA": "ğŸ‡¶ğŸ‡¦", "RO": "ğŸ‡·ğŸ‡´", "RU": "ğŸ‡·ğŸ‡º",
    "RW": "ğŸ‡·ğŸ‡¼", "KN": "ğŸ‡°ğŸ‡³", "LC": "ğŸ‡±ğŸ‡¨", "VC": "ğŸ‡»ğŸ‡¨", "WS": "ğŸ‡¼ğŸ‡¸", "SM": "ğŸ‡¸ğŸ‡²",
    "ST": "ğŸ‡¸ğŸ‡¹", "SA": "ğŸ‡¸ğŸ‡¦", "SN": "ğŸ‡¸ğŸ‡³", "RS": "ğŸ‡·ğŸ‡¸", "SC": "ğŸ‡¸ğŸ‡¨", "SL": "ğŸ‡¸ğŸ‡±",
    "SG": "ğŸ‡¸ğŸ‡¬", "SK": "ğŸ‡¸ğŸ‡°", "SI": "ğŸ‡¸ğŸ‡®", "SB": "ğŸ‡¸ğŸ‡§", "SO": "ğŸ‡¸ğŸ‡´", "ZA": "ğŸ‡¿ğŸ‡¦",
    "SS": "ğŸ‡¸ğŸ‡¸", "ES": "ğŸ‡ªğŸ‡¸", "LK": "ğŸ‡±ğŸ‡°", "SD": "ğŸ‡¸ğŸ‡©", "SR": "ğŸ‡¸ğŸ‡·", "SE": "ğŸ‡¸ğŸ‡ª",
    "CH": "ğŸ‡¨ğŸ‡­", "SY": "ğŸ‡¸ğŸ‡¾", "TW": "ğŸ‡¹ğŸ‡¼", "TJ": "ğŸ‡¹ğŸ‡¯", "TZ": "ğŸ‡¹ğŸ‡¿", "TH": "ğŸ‡¹ğŸ‡­",
    "TL": "ğŸ‡¹ğŸ‡±", "TG": "ğŸ‡¹ğŸ‡¬", "TO": "ğŸ‡¹ğŸ‡´", "TT": "ğŸ‡¹ğŸ‡¹", "TN": "ğŸ‡¹ğŸ‡³", "TR": "ğŸ‡¹ğŸ‡·",
    "TM": "ğŸ‡¹ğŸ‡²", "TV": "ğŸ‡¹ğŸ‡»", "UG": "ğŸ‡ºğŸ‡¬", "UA": "ğŸ‡ºğŸ‡¦", "AE": "ğŸ‡¦ğŸ‡ª", "GB": "ğŸ‡¬ğŸ‡§",
    "US": "ğŸ‡ºğŸ‡¸", "UY": "ğŸ‡ºğŸ‡¾", "UZ": "ğŸ‡ºğŸ‡¿", "VU": "ğŸ‡»ğŸ‡º", "VA": "ğŸ‡»ğŸ‡¦", "VE": "ğŸ‡»ğŸ‡ª",
    "VN": "ğŸ‡»ğŸ‡³", "YE": "ğŸ‡¾ğŸ‡ª", "ZM": "ğŸ‡¿ğŸ‡²", "ZW": "ğŸ‡¿ğŸ‡¼"
}
    try:
        # headers = {'Authorization': f'Bearer {IPINFO_API_KEY}'} if IPINFO_API_KEY else {}
        response = requests.get(f'https://api.ipregistry.co/{ip}?key=ira_w1eGyZ3wi2XljsEa4jyt5stR6Pe8aa2knCA6')
        data = response.json()
        if 'error' in data:
            return 'Unknown location'
        loca = f"{data.get('location', {}).get('country', {}).get('code', 'Unknown country')}"
        flag = flags.get(loca.upper(), "N/A")
        return loca,flag
    except Exception as e:
        # logger.error(f"Error fetching location for IP {ip}: {e}")
        return 'Unknown location'
def check_proxy(proxy_str):
    try:
        parts = proxy_str.strip().split(':')
        ip, port = parts[0], parts[1]
        auth = ""
        if len(parts) == 4:
            user, password = parts[2], parts[3]
            auth = f"{user}:{password}@"
        http_proxies = {
            'http': f'http://{auth}{ip}:{port}',
            'https': f'https://{auth}{ip}:{port}',
        }
        socks_proxies = {
            'http': f'socks5h://{auth}{ip}:{port}',
            'https': f'socks5h://{auth}{ip}:{port}',
        }
        loca,flag = get_proxy_location(ip=ip)
        try:
            r = requests.get("http://ip-api.com/json", proxies=http_proxies, timeout=5)
            data = r.json()
            if data["status"] == "success":
                country_code = data["countryCode"]
                country_flag = chr(127397 + ord(country_code[0])) + chr(127397 + ord(country_code[1]))
                return {
                    "proxy": proxy_str,
                    "working": True,
                    "protocol": "HTTP",
                    "country": loca,
                    "flag": flag
                }
        except:
            pass
        try:
            r = requests.get("http://ip-api.com/json", proxies=socks_proxies, timeout=5)
            data = r.json()
            if data["status"] == "success":
                country_code = data["countryCode"]
                country_flag = chr(127397 + ord(country_code[0])) + chr(127397 + ord(country_code[1]))
                return {
                    "proxy": proxy_str,
                    "working": True,
                    "protocol": "SOCKS5",
                    "country": loca,
                    "flag": flag
                }
        except:
            pass
        return {
        "proxy": proxy_str,
        "working": False,
        "protocol": "HTTP",
        "country": None,
        "flag": ""
        }
    except:
        return {
            "proxy": proxy_str,
            "working": False,
            "protocol": "HTTP",
            "country": None,
            "flag": ""
        }
@app.route("/")
def index():
    return render_template("index.html")

@app.route("/check", methods=["POST"])
def check():
    data = request.json
    proxy_list = data.get("proxies", [])
    results = []
    with concurrent.futures.ThreadPoolExecutor(max_workers=50) as executor:
        futures = [executor.submit(check_proxy, p) for p in proxy_list]
        for f in concurrent.futures.as_completed(futures):
            results.append(f.result())
    return jsonify(results)

if __name__ == '__main__':
    app.run(host='0.0.0.0', port=port)
